{"version":3,"sources":["components/PricingTable.js","components/common/PricingCard.js","App.js","serviceWorker.js","index.js"],"names":["pricings","title","price","users","features","PricingTable","react_default","a","createElement","Col","xs","Row","sm","span","offset","className","map","pricing","key","common_PricingCard","Object","assign","Component","PricingCard","props","_props$title","_props$price","_props$users","_props$features","md","lg","feature","Button","variant","App","PricingTable_PricingTable","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wRAIMA,EAAW,CACf,CACEC,MAAO,OACPC,MAAO,EACPC,MAAO,EACPC,SAAU,CAAC,gBAAiB,mCAE9B,CACEH,MAAO,UACPC,MAAO,EACPC,MAAO,EACPC,SAAU,CAAC,gBAAiB,mCAE9B,CACEH,MAAO,QACPC,MAAO,GACPC,MAAO,EACPC,SAAU,CAAC,gBAAiB,oCAGXC,mLAEjB,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKC,GAAI,IACPJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACEL,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKC,GAAI,GAAIE,GAAI,CAAEC,KAAM,EAAGC,OAAQ,GAAKC,UAAU,kBACjDT,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACGX,EAASgB,IAAI,SAACC,EAASC,GAAV,OACZZ,EAAAC,EAAAC,cAACW,EAADC,OAAAC,OAAA,CAAaH,IAAKA,GAASD,iBARDK,qBCK3BC,EA1BK,SAAAC,GAAS,IAAAC,EACiCD,EAApDvB,aADmB,IAAAwB,EACX,GADWA,EAAAC,EACiCF,EAAxCtB,aADO,IAAAwB,EACC,EADDA,EAAAC,EACiCH,EAA7BrB,aADJ,IAAAwB,EACY,EADZA,EAAAC,EACiCJ,EAAlBpB,gBADf,IAAAwB,EAC0B,GAD1BA,EAG3B,OACEtB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKC,GAAI,GAAIE,GAAI,EAAGiB,GAAI,GAAIC,GAAI,EAAGf,UAAU,oBAC3CT,EAAAC,EAAAC,cAAA,MAAIO,UAAU,WAAWd,GACzBK,EAAAC,EAAAC,cAAA,KAAGO,UAAU,SACXT,EAAAC,EAAAC,cAAA,QAAMO,UAAU,sBACdT,EAAAC,EAAAC,cAAA,gBACCN,EACDI,EAAAC,EAAAC,cAAA,uBAGJF,EAAAC,EAAAC,cAAA,KAAGO,UAAU,SACVZ,EADH,IACWA,EAAQ,EAAI,QAAU,QAEhCC,EAASY,IAAI,SAACe,EAASb,GAAV,OACZZ,EAAAC,EAAAC,cAAA,KAAGO,UAAU,QAAQG,IAAKA,GACvBa,KAGLzB,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAQC,QAAQ,WAAhB,iBCVSC,mLARX,OACE5B,EAAAC,EAAAC,cAAA,OAAKO,UAAU,OACbT,EAAAC,EAAAC,cAAC2B,EAAD,cAJUb,aCQEc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpC,EAAAC,EAAAC,cAACmC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.181b35b3.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Row, Col } from \"react-bootstrap\";\nimport { PricingCard } from \"../components\";\n\nconst pricings = [\n  {\n    title: \"Free\",\n    price: 0,\n    users: 1,\n    features: [\"Basic Support\", \"All core writing room Features\"]\n  },\n  {\n    title: \"Starter\",\n    price: 9,\n    users: 3,\n    features: [\"Basic Support\", \"All core writing room Features\"]\n  },\n  {\n    title: \"Small\",\n    price: 20,\n    users: 7,\n    features: [\"Basic Support\", \"All core writing room Features\"]\n  }\n];\nexport default class PricingTable extends Component {\n  render() {\n    return (\n      <Col xs={12}>\n        <Row>\n          <Col xs={12} sm={{ span: 8, offset: 2 }} className=\"card-container\">\n            <Row>\n              {pricings.map((pricing, key) => (\n                <PricingCard key={key} {...pricing} />\n              ))}\n            </Row>\n          </Col>\n        </Row>\n      </Col>\n    );\n  }\n}\n","import React from \"react\";\nimport { Row, Col, Button } from \"react-bootstrap\";\n\nconst PricingCard = props => {\n  const { title = \"\", price = 0, users = 0, features = [] } = props;\n\n  return (\n    <Col xs={12} sm={4} md={12} lg={4} className=\"card text-center\">\n      <h2 className=\"heading\">{title}</h2>\n      <p className=\"price\">\n        <span className=\"amount text-center\">\n          <sup>$</sup>\n          {price}\n          <sub>/month</sub>\n        </span>\n      </p>\n      <p className=\"items\">\n        {users} {users > 1 ? \"Users\" : \"User\"}\n      </p>\n      {features.map((feature, key) => (\n        <p className=\"items\" key={key}>\n          {feature}\n        </p>\n      ))}\n      <Button variant=\"success\">GET STARTED</Button>\n    </Col>\n  );\n};\n\nexport default PricingCard;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { PricingTable } from \"./components\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <PricingTable />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}